{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","goods","setGoods","useEffect","visibleGoods","ALPHABET","sort","a","b","localeCompare","LENGTH","length","reverse","className","type","classNames","onClick","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,mEAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAME,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACA,EAA0BL,mBAASF,GAAnC,mBAAOQ,EAAP,KAAcC,EAAd,KA2CA,OAxBAC,qBAAU,WACR,IAAMC,EAAY,UAAOX,GAEzB,OAAQI,GACN,KAAKL,EAASa,SACZD,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAC5C,MAEF,KAAKhB,EAASkB,OACZN,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,OAASH,EAAEG,UAG3C,KAAKnB,EAASI,MAKZG,GACFK,EAAaQ,UAGfV,EAASE,KACR,CAACP,EAAUE,IAGZ,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,SAAU,UAAW,CACzC,WAAYlB,IAAaL,EAASa,WAEpCW,QAjDgC,WACtClB,EAAYN,EAASa,WA2CjB,iCAUA,wBACES,KAAK,SACLD,UAAWE,IAAW,SAAU,aAAc,CAC5C,WAAYlB,IAAaL,EAASkB,SAEpCM,QAvDwB,WAC9BlB,EAAYN,EAASkB,SAiDjB,4BAUA,wBACEI,KAAK,SACLD,UAAWE,IAAW,SAAU,aAAc,CAC5C,YAAahB,IAEfiB,QA7DmB,WACzBhB,GAAc,SAAAiB,GAAI,OAAKA,MAuDnB,sBAUEpB,IAAaL,EAASI,MAAQG,IAC9B,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAlEe,WACvBlB,EAAYN,EAASI,MACrBI,GAAc,IA6DR,sBAWJ,6BACGC,EAAMiB,KAAI,SAACC,GAAD,OACT,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YClHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.490d9877.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n  const [goods, setGoods] = useState(goodsFromServer);\n\n  const handleClickSortByAlphabetically = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const handleClickSortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const handleClickReverse = () => {\n    setIsReversed(prev => !prev);\n  };\n\n  const handleClickReset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  useEffect(() => {\n    const visibleGoods = [...goodsFromServer];\n\n    switch (sortType) {\n      case SortType.ALPHABET:\n        visibleGoods.sort((a, b) => a.localeCompare(b));\n        break;\n\n      case SortType.LENGTH:\n        visibleGoods.sort((a, b) => a.length - b.length);\n        break;\n\n      case SortType.NONE:\n      default:\n        break;\n    }\n\n    if (isReversed) {\n      visibleGoods.reverse();\n    }\n\n    setGoods(visibleGoods);\n  }, [sortType, isReversed]);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-info', {\n            'is-light': sortType !== SortType.ALPHABET,\n          })}\n          onClick={handleClickSortByAlphabetically}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-success', {\n            'is-light': sortType !== SortType.LENGTH,\n          })}\n          onClick={handleClickSortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={handleClickReverse}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.NONE || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleClickReset}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {goods.map((good) => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}